from typing import ClassVar, Dict, List, Tuple, overload

class ActionType:
    __members__: ClassVar[dict] = ...  # read-only
    BUILD: ClassVar[ActionType] = ...
    DESTROY: ClassVar[ActionType] = ...
    MOVE: ClassVar[ActionType] = ...
    STAY: ClassVar[ActionType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class Craftsman:
    id: int
    isT1: bool
    x: int
    y: int
    def __init__(self, id: int, x: int, y: int, isT1: bool) -> None: ...

class Game:
    gameOptions: GameOptions
    def __init__(self, gameOptions: GameOptions, map: List[List[int]], craftsmen: List[Craftsman]) -> None: ...
    def addAction(self, action: GameAction) -> None: ...
    def getCurrentState(self) -> GameState: ...
    def nextTurn(self) -> None: ...
    def __copy__(self) -> Game: ...
    def __deepcopy__(self, memo: dict) -> Game: ...

class GameAction:
    actionType: ActionType
    craftsmanId: int
    subActionType: SubActionType
    def __init__(self, craftsmanId: int, actionType: ActionType, subActionType: SubActionType) -> None: ...

class GameOptions:
    castleCoeff: int
    mapHeight: int
    mapWidth: int
    maxTurns: int
    territoryCoeff: int
    wallCoeff: int
    def __init__(self) -> None: ...

class GameState:
    craftsmen: Dict[int, Craftsman]
    isT1Turn: bool
    map: MapState
    turn: int
    @overload
    def __init__(self, mapState: MapState, craftsmen: Dict[int, Craftsman]) -> None: ...
    @overload
    def __init__(self, mapState: MapState, craftsmen: Dict[int, Craftsman], turn: int, isT1Turn: bool) -> None: ...
    def applyActions(self, actions: List[GameAction]) -> GameState: ...
    def findCraftsmanIdByPos(self, x: int, y: int) -> int: ...
    def findWayToBuild(self, x: int, y: int, isT1: bool, buildAbleCells: List[Tuple[int, int]]) -> Tuple[int, GameAction]: ...
    @property
    def lastTurnActions(self) -> List[GameAction]: ...

class MapState:
    tiles: List[List[int]]
    def __init__(self, width: int, height: int) -> None: ...
    def calcPoints(self, arg0: GameOptions, arg1: bool) -> int: ...
    def printMap(self) -> str: ...

class SubActionType:
    __members__: ClassVar[dict] = ...  # read-only
    BUILD_DOWN: ClassVar[SubActionType] = ...
    BUILD_LEFT: ClassVar[SubActionType] = ...
    BUILD_RIGHT: ClassVar[SubActionType] = ...
    BUILD_UP: ClassVar[SubActionType] = ...
    DESTROY_DOWN: ClassVar[SubActionType] = ...
    DESTROY_LEFT: ClassVar[SubActionType] = ...
    DESTROY_RIGHT: ClassVar[SubActionType] = ...
    DESTROY_UP: ClassVar[SubActionType] = ...
    MOVE_DOWN: ClassVar[SubActionType] = ...
    MOVE_DOWN_LEFT: ClassVar[SubActionType] = ...
    MOVE_DOWN_RIGHT: ClassVar[SubActionType] = ...
    MOVE_LEFT: ClassVar[SubActionType] = ...
    MOVE_RIGHT: ClassVar[SubActionType] = ...
    MOVE_UP: ClassVar[SubActionType] = ...
    MOVE_UP_LEFT: ClassVar[SubActionType] = ...
    MOVE_UP_RIGHT: ClassVar[SubActionType] = ...
    STAY: ClassVar[SubActionType] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TileMask:
    __members__: ClassVar[dict] = ...  # read-only
    CASTLE: ClassVar[TileMask] = ...
    POND: ClassVar[TileMask] = ...
    T1_CLOSE_TERRITORY: ClassVar[TileMask] = ...
    T1_CRAFTSMAN: ClassVar[TileMask] = ...
    T1_OPEN_TERRITORY: ClassVar[TileMask] = ...
    T1_WALL: ClassVar[TileMask] = ...
    T2_CLOSE_TERRITORY: ClassVar[TileMask] = ...
    T2_CRAFTSMAN: ClassVar[TileMask] = ...
    T2_OPEN_TERRITORY: ClassVar[TileMask] = ...
    T2_WALL: ClassVar[TileMask] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...

class TileStatus:
    __members__: ClassVar[dict] = ...  # read-only
    IS_TERRITORY: ClassVar[TileStatus] = ...
    NOT_TERRITORY: ClassVar[TileStatus] = ...
    NOT_VISITED: ClassVar[TileStatus] = ...
    __entries: ClassVar[dict] = ...
    def __init__(self, value: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def __index__(self) -> int: ...
    def __int__(self) -> int: ...
    def __ne__(self, other: object) -> bool: ...
    @property
    def name(self) -> str: ...
    @property
    def value(self) -> int: ...
